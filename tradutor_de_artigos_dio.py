# -*- coding: utf-8 -*-
"""Tradutor de artigos DIO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mNMXHJP9eKIRT0-1b32PBw9QgWVen_uv
"""

!pip install requests beautifulsoup4 openai langchain-openai

import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
  response = requests.get(url)

  if response.status_code == 200:
    soup = BeautifulSoup(response.text, 'html.parser')
    for script_or_style in soup(['script', 'style']):
      script_or_style.decompose()
    texto = soup.get_text(separator= " ")
    #Limpar texto
    linhas = (line.strip() for line in texto.splitlines())
    parts = (phrase.strip() for line in linhas for phrase in line.split(" "))
    texto_limpo = '\n'.join(part for part in parts if part)
    return texto_limpo
  else:
    print(f"Failed to fetch URL. Status code: {response.status_code}")
    return none
  soup = BeautifulSoup(response.text, 'html.parser')
  text = soup.get_text()
  return text

extract_text_from_url('https://dev.to/kenakamu/azure-open-ai-in-vnet-3alo')

from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI(
    azure_endpoint= "ENDPOINT_URL",
    api_key= "API_KEY",
    api_version= "2024-02-15-preview",
    deployment_name= "gpt-4o-mini",
    max_retries=0

)

def translate_Article(text,lang):
  messages = [
      ("system", "Voc√ä atua como tradutor de textos"),
      ("user", f"Traduza o {text} para o idioma {lang} e responda em markdown")
  ]
  response = client.invoke(messages)
  print(response.content)
  return response.content

url = 'https://dev.to/nozibul_islam_113b1d5334f/dsa-heap-key-questions-and-challenges-3a55'
text = extract_text_from_url(url)
article = translate_Article(text, "pt-br")

print(article)